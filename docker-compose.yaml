services:
  nginx:
    container_name: nginx
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      # These ports are in format <host-port>:<container-port>
      - '80:80' # Public HTTP Port
      - '443:443' # Public HTTPS Port
      - '81:81' # Admin Web Port
      # Add any other Stream port you want to expose
      # - '21:21' # FTP
    environment:
      DISABLE_IPV6: 'true'
    volumes:
      - nginx_data:/data
      - letsencrypt:/etc/letsencrypt

  derbynet:
    container_name: derbynet
    image: jeffpiazza/derbynet_server
    ports:
      # - 127.0.0.1:8050:80
      - 8050:8050
    #   - 8051:443
    volumes:
      - derbynet_data:/var/lib/derbynet
      - /etc/localtime:/etc/localtime:ro
      # edit passwords on host system `sudo vim /var/lib/docker/volumes/faraday_derbyet_data/_data/config-roles.inc`
    restart: unless-stopped

  jellyfin:
    container_name: jellyfin
    image: lscr.io/linuxserver/jellyfin:latest
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=US/Central
      - JELLYFIN_PublishedServerUrl=${local_ip}
      - DOCKER_MODS=linuxserver/mods:jellyfin-opencl-intel
    volumes:
      - jellyfin_data:/config
      - jellyfin_cache:/cache
      - ${media_path}:/media
    devices:
      - /dev/dri:/dev/dri
    restart: unless-stopped

  plex:
    container_name: plex
    image: lscr.io/linuxserver/plex:latest
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=US/Central
      - VERSION=docker
      - PLEX_CLAIM=${plex_claim}
    devices:
      - /dev/dri:/dev/dri
    volumes:
      - plex_data:/config
      - ${media_path}:/media
    restart: unless-stopped

  vpn:
    image: thrnz/docker-wireguard-pia
    container_name: vpn
    volumes:
        # Auth token is stored here
        - vpn_data:/pia
        # If enabled, the forwarded port is dumped to /pia-shared/port.dat for potential use in other containers
        - ./pia-shared:/pia-shared
    cap_add:
      - NET_ADMIN
      # SYS_MODULE might not be needed with a 5.6+ kernel?
      - SYS_MODULE
    environment:
      # The following env vars are required:
      - LOC=ca_ontario
      - USER=${vpn_username}
      - PASS=${vpn_password}
      # The rest are optional:
      - LOCAL_NETWORK=192.168.1.0/24
      - KEEPALIVE=25
      - VPNDNS=10.0.0.241,10.0.0.243
      - PORT_FORWARDING=1
    ports:
      - 8888:8888/tcp # HTTP proxy
      - 8388:8388/tcp # Shadowsocks
      - 8389:8388/udp # Shadowsocks
      # Radarr
      - 7878:7878
      # Sonarr
      - 8989:8989
      # Readarr
      - 8787:8787
      # Prowlarr
      - 9696:9696
      # Lidarr
      - 8686:8686
      # Bazarr
      - 6767:6767
      # Qbittorrent
      - 8080:8080
      - 6881:6881
      - 6881:6881/udp
    sysctls:
      # The wg-quick script tries to set this when setting up routing, however this requires running the container
      # with the --privileged flag set. Setting it here instead if needed means the container can be run with lower
      # privileges. This only needs setting if strict reverse path filtering (rp_filter=1) is used.
      - net.ipv4.conf.all.src_valid_mark=1
      # May as well disable ipv6. Should be blocked anyway.
      - net.ipv6.conf.default.disable_ipv6=1
      - net.ipv6.conf.all.disable_ipv6=1
      - net.ipv6.conf.lo.disable_ipv6=1
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

    



  # vpn:
  #   image: qmcgaw/gluetun:latest
  #   container_name: vpn
  #   # container_name: gluetun
  #   # line above must be uncommented to allow external containers to connect. See https:\github.com/qdm12/gluetun/wiki/Connect-a-container-to-gluetun#external-container-to-gluetun
  #   cap_add:
  #     - NET_ADMIN
  #   devices:
  #     - /dev/net/tun:/dev/net/tun
  #   ports:
  #     - 8888:8888/tcp # HTTP proxy
  #     - 8388:8388/tcp # Shadowsocks
  #     - 8389:8388/udp # Shadowsocks
  #     # Radarr
  #     - 7878:7878
  #     # Sonarr
  #     - 8989:8989
  #     # Readarr
  #     - 8787:8787
  #     # Prowlarr
  #     - 9696:9696
  #     # Lidarr
  #     - 8686:8686
  #     # Qbittorrent
  #     - 8080:8080
  #     - 6881:6881
  #     - 6881:6881/udp
  #   sysctls:
  #     - net.ipv6.conf.all.disable_ipv6=1
  #   volumes:
  #     - gluetun_data:/gluetun
  #   environment:
  #     # See https:\github.com/qdm12/gluetun/wiki
  #     - VPN_SERVICE_PROVIDER=private internet access
  #     - OPENVPN_USER=${openvpn_username}
  #     - OPENVPN_PASSWORD=${openvpn_password}
  #     - SERVER_REGIONS=CA Ontario
  #     - TZ=Chicago/USA
  #     # - PORT_FORWARD_ONLY=true
  #     - VPN_PORT_FORWARDING=on
  #     # - VPN_PORT_FORWARDING_STATUS_FILE=/gluetun/piaportforward.json
  #   restart: unless-stopped
  # flaresolverr:
  #     image: ghcr.io/flaresolverr/flaresolverr:latest
  #     container_name: flaresolverr
  #     environment:
  #       - LOG_LEVEL=${LOG_LEVEL:-info}
  #       - LOG_HTML=${LOG_HTML:-false}
  #       - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
  #       - TZ=UTC
  #       - PORT=31314
  #       - HOST=127.0.0.1
  #     network_mode: host
  #     pull_policy: always
  #     restart: unless-stopped

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Chicago/USA
    volumes:
      - prowlarr_data:/config
    restart: unless-stopped
    # ports:
    #   # Prowlarr
    #   - 9696:9696
    network_mode: "service:vpn"
    depends_on:
      - vpn

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Chicago/USA
    volumes:
      - radarr_data:/config:rw
      - ${movies}:/movies
      - ${kids_movies}:/kids_movies
      - ${qbittorrent_downloads}:/downloads
    restart: unless-stopped
    network_mode: "service:vpn"
    depends_on:
      - vpn

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Chicago/USA
    volumes:
      - sonarr_data:/config
      - ${tv_shows}:/tv_shows
      - ${kids_tv_shows}:/kids_tv_shows
      - ${qbittorrent_downloads}:/downloads
    restart: unless-stopped
    network_mode: "service:vpn"
    depends_on:
      - vpn

  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Chicago/USA
    volumes:
      - lidarr_data:/config
      - ${music}:/music
      - ${qbittorrent_downloads}:/downloads
    restart: unless-stopped
    network_mode: "service:vpn"
    depends_on:
      - vpn

  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Chicago/USA
    volumes:
      - readarr_data:/config
      - ${books}:/books #optional
      - ${audiobooks}:/audiobooks
      - ${qbittorrent_downloads}:/downloads #optional
    restart: unless-stopped
    network_mode: "service:vpn"
    depends_on:
      - vpn
  
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - bazarr_data:/config
      - ${movies}:/movies #optional
      - ${tv_shows}:/tv_shows #optional
      - ${kids_movies}:/kid_movies
      - ${kids_tv_shows}:/kid_tv_shows
    # ports:
    #   - 6767:6767
    restart: unless-stopped
    network_mode: "service:vpn"
    depends_on:
      - vpn

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Chicago/USA
      - WEBUI_PORT=8080
    volumes:
      - qbittorrent_data:/config
      - ${qbittorrent_downloads}:/downloads # Qbittorrent download path
    restart: unless-stopped
    network_mode: "service:vpn"
    depends_on:
      - vpn

  audiobookshelf:
    image: ghcr.io/advplyr/audiobookshelf:latest
    ports:
      - 13378:80
    volumes:
      - ${audiobooks}:/audiobooks
      - ${podcasts}:/podcasts
      - audiobookshelf_data:/config
      - audiobookshelf_data:/metadata
    environment:
      - TZ=Chicago/USA
    restart: unless-stopped

  # podgrab:
  #   image: akhilrex/podgrab
  #   container_name: podgrab
  #   environment:
  #     - CHECK_FREQUENCY=240
  #    # - PASSWORD=password     ## Uncomment to enable basic authentication, username = podgrab
  #   volumes:
  #     - podgrab_data:/config
  #     - ${podcasts}:/assets
  #   ports:
  #     - 8082:8080
  #   restart: unless-stopped

  immich:
    container_name: immich
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    # extends:
    #   file: hwaccel.transcoding.yml
    #   service: quicksync # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    # environment:
    #   - NVIDIA_VISIBLE_DEVICES=all
    ports:
      - 2283:3001
    depends_on:
      - redis
      - database
    restart: always

  immich-machine-learning:
    container_name: immich_machine_learning
    # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: openvino # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    # environment:
    #   - NVIDIA_VISIBLE_DEVICES=all
    ports:
      - 3003:3003
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    restart: always

  redis:
    container_name: immich_redis
    image: docker.io/redis:6.2-alpine@sha256:d6c2911ac51b289db208767581a5d154544f2b2fe4914ea5056443f62dc6e900
    healthcheck:
      test: redis-cli ping || exit 1
    restart: always

  database:
    container_name: immich_postgres
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready --dbname='${DB_DATABASE_NAME}' || exit 1; Chksum="$$(psql --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command: ["postgres", "-c" ,"shared_preload_libraries=vectors.so", "-c", 'search_path="$$user", public, vectors', "-c", "logging_collector=on", "-c", "max_wal_size=2GB", "-c", "shared_buffers=512MB", "-c", "wal_compression=on"]
    restart: always

  homeassistant:
    container_name: homeassistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
    volumes:
      - homeassistant_data:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    restart: unless-stopped
    privileged: true
    network_mode: host

volumes:
  nginx_data:
  letsencrypt:
  derbynet_data:
  gluetun_data:
  prowlarr_data:
  radarr_data:
  sonarr_data:
  qbittorrent_data:
  lidarr_data:
  readarr_data:
  audiobookshelf_data:
  model-cache:
  jellyfin_data:
  jellyfin_cache:
  plex_data:
  vpn_data:
  bazarr_data:
  homeassistant_data:
  podgrab_data:
  # model-cache1:
